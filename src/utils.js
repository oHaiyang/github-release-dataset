import yaml from 'js-yaml';

// export for test
export const COMMENT =
  '# GENERATED BY https://github.com/oHaiyang/github-release-dataset, DO NOT MODIFY';
export const DATASET_KEY = 'dataset-name';
const YAML_CODE_BLOCK_REG = /```yaml *[\r\n]+([\s\S]*?)[\r\n]+```/gi;

export function buildCodeBlock(string) {
  return '```yaml' + '\n' + COMMENT + '\n\n' + string + '\n' + '```';
}

export function buildDatasetObj(name, dataset) {
  return {
    [DATASET_KEY]: name,
    dataset,
  };
}

export function readDatasets(releaseNote, datasetName) {
  let datasetMatch;
  let results = [];

  do {
    datasetMatch = YAML_CODE_BLOCK_REG.exec(releaseNote);
    if (datasetMatch) {
      const length = datasetMatch[0].length;
      const start = datasetMatch.index;
      const body = datasetMatch[1];
      const datasetObj = yaml.load(body);
      const name = datasetObj[DATASET_KEY];
      const { dataset } = datasetObj;

      // If datasetName are specified, return name matched datasets,
      // otherwise return all datasets
      if (datasetName ? name === datasetName : !!name) {
        results.push({
          start,
          length,
          name,
          body,
          dataset,
          datasetObj,
        });
      }
    }
  } while (datasetMatch);

  return results;
}

export function insertIntoNote(note, text, top) {
  if (top) {
    return text + '\n' + note;
  }
  return note + '\n' + text;
}

export function getSplicedNote(note, start, length, text = '') {
  let nextString = note.slice(0, start);
  nextString += text;
  nextString += note.slice(start + length);
  return nextString;
}

export function getNewDataset(newDatasetOrUpdater, oldDataset) {
  if (typeof newDatasetOrUpdater === 'function') {
    return newDatasetOrUpdater(oldDataset);
  }
  return newDatasetOrUpdater;
}
